실습환경 구성
 - lab204-dataaccess 프로젝트 import
 - maven repository 설정 및 dependency library 맞춤

Step 1. 구동 환경 설정

 1) Hsqldb 초기화 스크립트
	. /lab204-dataaccess/src/test/resources/META-INF/testdata/sample_schema_hsql.sql 를 확인한다.
	현 실습 프로젝트에서는 편의상 매 테스트 케이스 재실행 시 관련 table 을 drop/create 하고 있음.
	
 2) dataSource 설정
	. /lab204-dataaccess/src/test/resources/META-INF/spring/context-common.xml 에 context:property-placeholder 설정을 추가한다.
	/**************************************************************************************/
	<context:property-placeholder location="classpath:/META-INF/spring/jdbc.properties" />
	/**************************************************************************************/

	. /lab204-dataaccess/src/test/resources/META-INF/spring/context-datasource.xml 를 설정한다.
	/**************************************************************************************/
	<jdbc:embedded-database id="dataSource" type="HSQL">
		<jdbc:script location= "META-INF/testdata/sample_schema_hsql.sql"/>
	</jdbc:embedded-database>
	/**************************************************************************************/

	. /lab204-dataaccess/src/test/resources/META-INF/spring/jdbc.properties 를 작성한다.
	/**************************************************************************************/
	driver=org.hsqldb.jdbcDriver
	dburl=jdbc:hsqldb:mem:testdb
	#dburl=jdbc:hsqldb:hsql://localhost/sampledb
	username=sa
	password=
	/**************************************************************************************/
	. cf.) 위에서 기본으로 memory DB 형식으로 자동 구동하도록 되어 있으나 dburl=jdbc:hsqldb:hsql://localhost/sampledb 과 같이 변경시에는 
	  /lab204-dataaccess/db 상에서 (외부 탐색기에서) runHsqlDB.cmd 를 실행하여 DB Server 를 구동하고 테스트할 수도 있다.


 3) transaction 설정
	. /lab204-dataaccess/src/test/resources/META-INF/spring/context-transaction.xml 를 작성한다.
	/**************************************************************************************/
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource"/>
	</bean>
	/**************************************************************************************/
	. cf.) 여기서는 transaction manager 만을 설정하였고, TestCase 내에서 전역 @Transactional 설정으로 트랜잭션을 일괄 지정하고 있으나 보통 AOP 형식(tx:aop)의 트랜잭션 대상 지정으로 비즈니스 서비스의 메서드에 일괄 지정하는 경우가 많다. cf2.) @Transactional Annotation 으로 대상 메서드에 개별로 따로 지정할 수도 있다.

 4) Spring 의 iBATIS 연동 설정
	. /lab204-dataaccess/src/test/resources/META-INF/spring/context-sqlMap.xml 를 작성한다. 
	/**************************************************************************************/
	<!-- SqlMap setup for iBATIS Database Layer -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation"
			value="classpath:/META-INF/sqlmap/sql-map-config.xml" />
		<!-- 
		<property name="mappingLocations"
			value="classpath:/META-INF/sqlmap/mappings/lab-*.xml" />
		 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	/**************************************************************************************/
	. 최신 프레임워크 환경에서는 sql-map-config.xml 내에 개별 sql 맵핑 파일일 일일이 지정하는 것이 아니라 위의 mappingLocations 영역을 주석 해제하여 Spring 의 ResourceLoader 형식으로 패턴 매칭에 의거한 일괄 로딩으로 처리가 가능하다. (단, 테스트 결과 CacheModel 등의 일부 기능에서 문제가 발생하는 경우가 있으므로 사용에 유의할것!!)

  5) iBATIS 의 sql-map-config 설정 파일 작성
	. /lab204-dataaccess/src/test/resources/META-INF/sqlmap/sql-map-config.xml 를 작성한다.
	/**************************************************************************************/
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE sqlMapConfig PUBLIC "-//iBATIS.com//DTD SQL Map Config 2.0//EN"
	    "http://www.ibatis.com/dtd/sql-map-config-2.dtd">
	
	<sqlMapConfig>
		<settings useStatementNamespaces="false"
				  cacheModelsEnabled="true" 
		/>
			
		<!-- Spring 2.5.5 이상, iBATIS 2.3.2 이상에서는 iBATIS 연동을 위한 SqlMapClientFactoryBean 정의 시 mappingLocations 속성으로 
		     Sql 매핑 파일의 일괄 지정이 가능하다. 
		     ("sqlMapClient" bean 설정 시  mappingLocations="classpath:/META-INF/sqlmap/mappings/lab-*.xml" 로 지정하였음)
			  단, sql-map-config-2.dtd 에서 sqlMap 요소를 하나 이상 지정하도록 되어 있으므로 아래의 dummy 매핑 파일을 설정하였다.
		-->
		<sqlMap resource="META-INF/sqlmap/mappings/lab-dummy.xml" />
		
				<sqlMap resource="META-INF/sqlmap/mappings/lab-emp.xml" />
		<sqlMap resource="META-INF/sqlmap/mappings/lab-emp-cachemodel.xml" />
	</sqlMapConfig>
	/**************************************************************************************/

 6) Id Generation Service 설정
	. /lab204-dataaccess/src/test/resources/META-INF/spring/context-idgen.xml 를 작성한다.
	/**************************************************************************************/
	<bean name="primaryTypeSequenceIds"
		class="egovframework.rte.fdl.idgnr.impl.EgovSequenceIdGnrService"
		destroy-method="destroy">
		<property name="dataSource" ref="dataSource" />
		<property name="query" value="SELECT NEXT VALUE FOR empseq FROM DUAL" />
	</bean>
	/**************************************************************************************/
	. 여기서는 Hsqldb 를 사용하여 Oracle 의 DUAL 테이블 역할을 할 수 있도록 초기화 스크립트 sql 에 create 하였으며, DB Sequence 기반의 Id Generation 을 사용한 예이다. (위에서 select next value for seq_id from xx 는 Hsqldb 의 특화된 sequence 사용 문법임에 유의!)

 7) common 설정
	. /lab204-dataaccess/src/test/resources/META-INF/spring/context-common.xml 를 확인한다.
	/**************************************************************************************/
		<!-- PropertyPlaceholderConfigurer 설정 -->
		..
		<!-- MessageSource 설정 -->
		..
		<!-- 전자정부 TraceHandler 설정 관련 -->
		..
		<!-- 스테레오 타입 Annotation 을 인식하여 Spring bean 으로 자동 등록하기 위한 component-scan 설정 -->
		..
	/**************************************************************************************/
	. 외부 properties 파일을 Container 구동 시 미리 Spring Bean 설정 파일의 속성값으로 대체하여 처리해주는 PropertyPlaceholderConfigurer 설정
	. Locale 에 따른 다국어 처리를 쉽게 해주는 messageSource 설정. 여기서는 전자정부 실행환경의 id generation 서비스와 properties 서비스의 메시지 파일과 업무 어플리케이션을 위한 사용자 메시지(/message/message-common - message-common_en_US.properties, message-common_ko_KR.properties 를 확인할 것) 를 지정하였다.
	. exception 처리 Handler 와 유사하게 특정한 상황에서 사용자가 Trace Handler 를 지정하여 사용할 수 있도록 전자정부 프레임워크에서 가이드하고 있는 TraceHandler 설정
	. component-scan 설정

 8) aspect 설정
	. /lab204-dataaccess/src/test/resources/META-INF/spring/context-aspect.xml 를 작성한다.
	/**************************************************************************************/
	<aop:config>
		<aop:pointcut id="serviceMethod"
			expression="execution(* egovframework.lab..impl.*Impl.*(..))" />

		<aop:aspect ref="exceptionTransfer">
			<aop:after-throwing throwing="exception"
				pointcut-ref="serviceMethod" method="transfer" />
		</aop:aspect>
	</aop:config>

	<bean id="exceptionTransfer" class="egovframework.rte.fdl.cmmn.aspect.ExceptionTransfer">
		<property name="exceptionHandlerService">
			<list>
				<ref bean="defaultExceptionHandleManager" />
			</list>
		</property>
	</bean>

	<bean id="defaultExceptionHandleManager"
		class="egovframework.rte.fdl.cmmn.exception.manager.DefaultExceptionHandleManager">
		<property name="reqExpMatcher" ref="antPathMater" />
		<property name="patterns">
			<list>
				<value>**service.impl.*</value>
			</list>
		</property>
		<property name="handlers">
			<list>
				<ref bean="egovHandler" />
			</list>
		</property>
	</bean>


	<bean id="egovHandler"
		class="egovframework.lab.dataaccess.common.JdbcLoggingExcepHndlr" />
	/**************************************************************************************/
	. Spring AOP(xml 설정 방식) 를 사용하여 비지니스 메서드에서 exception 이 발생한 경우 일괄적으로 ExceptionTransfer 의 transfer 메서드 기능(Advice) 를 수행해 주게 됨. --> Exception logging 및 BizException 형태로 wrapping 하여 재처리하는 Exception 공통처리 후 ExceptionHandleManager 에 의해 관리(설정) 되는 Handler (ex. exception 내용을 메일링 한더던지.. 사용자 구현 가능) 가 자동적으로 추가 수행될 수 있음.



2. EmpService 서비스 작성

 1) Interface 작성
	. /lab204-dataaccess/src/main/java/egovframework/lab/dataaccess/service/EmpService.java 를 작성한다.
	/**************************************************************************************/
        public interface EmpService {
        
            public BigDecimal insertEmp(EmpVO empVO) throws Exception;
        
            public void updateEmp(EmpVO empVO) throws Exception;
        
            public void deleteEmp(EmpVO empVO) throws Exception;
        
            public EmpVO selectEmp(EmpVO empVO) throws Exception;
            
            public List<EmpVO> selectEmpList(EmpVO searchVO) throws Exception;
        
        }
	/**************************************************************************************/

 2) VO 작성
	. /lab204-dataaccess/src/main/java/egovframework/lab/dataaccess/service/EmpVO.java 를 작성한다.
	/**************************************************************************************/
        public class EmpVO extends SearchVO {
        
            private static final long serialVersionUID = -8049578957221741495L;
        
            private BigDecimal empNo;
        
            private String empName;
        
            private String job;
        
            private BigDecimal mgr;
        
            private Date hireDate;
        
            private BigDecimal sal;
        
            private BigDecimal comm;
        
            private BigDecimal deptNo;
        
            public BigDecimal getEmpNo() {
                return empNo;
            }
        
            public void setEmpNo(BigDecimal empNo) {
                this.empNo = empNo;
            }
        
            public String getEmpName() {
                return empName;
            }
        
            public void setEmpName(String empName) {
                this.empName = empName;
            }
        
            public String getJob() {
                return job;
            }
        
            public void setJob(String job) {
                this.job = job;
            }
        
            public BigDecimal getMgr() {
                return mgr;
            }
        
            public void setMgr(BigDecimal mgr) {
                this.mgr = mgr;
            }
        
            public Date getHireDate() {
                return hireDate;
            }
        
            public void setHireDate(Date hireDate) {
                this.hireDate = hireDate;
            }
        
            public BigDecimal getSal() {
                return sal;
            }
        
            public void setSal(BigDecimal sal) {
                this.sal = sal;
            }
        
            public BigDecimal getComm() {
                return comm;
            }
        
            public void setComm(BigDecimal comm) {
                this.comm = comm;
            }
        
            public BigDecimal getDeptNo() {
                return deptNo;
            }
        
            public void setDeptNo(BigDecimal deptNo) {
                this.deptNo = deptNo;
            }
        
        }
	/**************************************************************************************/

	
 3) Annotation 을 적용한 Impl
	. /lab204-dataaccess/src/main/java/egovframework/lab/dataaccess/service/impl/EmpServiceImpl.java 를 작성한다.
	/**************************************************************************************/
        @Service("empService")
        public class EmpServiceImpl extends AbstractServiceImpl implements EmpService {
        
            @Resource(name = "primaryTypeSequenceIds")
            EgovIdGnrService egovIdGnrService;
        
            @Resource(name = "empDAO")
            private EmpDAO empDAO;
        
            public BigDecimal insertEmp(EmpVO empVO) throws Exception {
                // ID generation Service 를 사용하여 key 를 땀. 여기서
                // primaryTypeSequenceIds 는 Sequence 기반임.
                BigDecimal generatedEmpNo = egovIdGnrService.getNextBigDecimalId();
                log.debug("EmpServiceImpl.insertEmp - generated empNo : " + generatedEmpNo);
        
                empVO.setEmpNo(generatedEmpNo);
        
                empDAO.insertEmp(empVO);
        
                return generatedEmpNo;
            }
        
            public void updateEmp(EmpVO empVO) throws Exception {
                empDAO.updateEmp(empVO);
            }
        
            public void deleteEmp(EmpVO empVO) throws Exception {
                empDAO.deleteEmp(empVO);
            }
        
            public EmpVO selectEmp(EmpVO empVO) throws Exception {
                EmpVO resultVO;
                resultVO = empDAO.selectEmp(empVO);
        
                if (resultVO == null) {
                    throw processException("info.nodata.msg");
                }
        
                return resultVO;
            }
        
            public List<EmpVO> selectEmpList(EmpVO searchVO) throws Exception {
                return empDAO.selectEmpList(searchVO);
            }
        
        
        }
	/**************************************************************************************/

 4) DAO 작성
	. /lab204-dataaccess/src/main/java/egovframework/lab/dataaccess/service/impl/EmpDAO.java 를 작성한다. 
	/**************************************************************************************/
        @Repository("empDAO")
        public class EmpDAO extends EgovAbstractDAO {
        
            public void insertEmp(EmpVO vo) {
                insert("insertEmp", vo);
            }
        
            public int updateEmp(EmpVO vo) {
                return update("updateEmp", vo);
            }
        
            public int deleteEmp(EmpVO vo) {
                return delete("deleteEmp", vo);
            }
        
            public EmpVO selectEmp(EmpVO vo) {
                return (EmpVO) selectByPk("selectEmp", vo);
                //return (EmpVO) selectByPk("selectEmpUsingCacheModelLRU", vo);
            }
        
            @SuppressWarnings("unchecked")
            public List<EmpVO> selectEmpList(EmpVO searchVO) {
                return list("selectEmpList", searchVO);
            }
        
        }
	/**************************************************************************************/

 5) mapping xml 작성
	. /lab204-dataaccess/src/test/resources/META-INF/sqlmap/mappings/lab-dummy.xml 를 확인한다.
	
	. /lab204-dataaccess/src/test/resources/META-INF/sqlmap/mappings/lab-emp-cachemodel.xml 를 작성한다.
	/**************************************************************************************/
	<sqlMap namespace="EmpCache">
	
		<typeAlias alias="empVO" type="egovframework.lab.dataaccess.service.EmpVO" />
		
		<!-- Spring 2.5.5 이상에서 mappingLocations 을 통해 sql mapping 파일 로딩하는 경우 CacheModel 사용에 문제가 있는듯. 주의할것! -->
		<cacheModel id="cacheEmpLRU" type="LRU" readOnly="true"
			serialize="false">
			<flushInterval hours="24" />
			<flushOnExecute statement="insertEmp" />
			<flushOnExecute statement="updateEmp" />
			<flushOnExecute statement="deleteEmp" />
			<property name="cache-size" value="1000" />
		</cacheModel>
		
		<!-- sql reuse test -->
		<sql id="selectEmpReuse">
			<![CDATA[
				select EMP_NO,
					   EMP_NAME,
					   JOB,
					   MGR,
					   HIRE_DATE,
					   SAL,
					   COMM,
					   DEPT_NO
				from EMP
				where 1=1
			]]>
			<include refid="empWhereEmpNo" />
		</sql>
		
		<sql id="empWhereEmpNo">
			<isNotNull prepend="and" property="empNo">
				EMP_NO = #empNo#
			</isNotNull>
		</sql>
	
		<!-- CacheModel test -->
		<select id="selectEmpUsingCacheModelLRU" parameterClass="empVO"
			resultMap="Emp.empResult" cacheModel="cacheEmpLRU">
			<include refid="selectEmpReuse" />
		</select>
	 
	</sqlMap>
	/**************************************************************************************/

	. /lab204-dataaccess/src/test/resources/META-INF/sqlmap/mappings/lab-emp.xml 를 작성한다.
	/**************************************************************************************/
	<sqlMap namespace="Emp">
	
		<typeAlias alias="empVO" type="egovframework.lab.dataaccess.service.EmpVO" />
	
		<resultMap id="empResult" class="empVO">
			<result property="empNo" column="EMP_NO" />
			<result property="empName" column="EMP_NAME" />
			<result property="job" column="JOB" />
			<result property="mgr" column="MGR" />
			<result property="hireDate" column="HIRE_DATE" />
			<result property="sal" column="SAL" />
			<result property="comm" column="COMM" />
			<result property="deptNo" column="DEPT_NO" />
		</resultMap>
	
		<insert id="insertEmp" parameterClass="empVO">
			<![CDATA[
				insert into EMP
						   (EMP_NO,
							EMP_NAME,
							JOB,
							MGR,
							HIRE_DATE,
							SAL,
							COMM,
							DEPT_NO)
				values	   (#empNo#,
							#empName#,
							#job#,
							#mgr#,
							#hireDate#,
							#sal#,
							#comm#,
							#deptNo#)
			]]>
		</insert>
	
		<update id="updateEmp" parameterClass="empVO">
			<![CDATA[
				update EMP
				   set EMP_NAME		= #empName#,
					   JOB 			= #job#,
					   MGR 			= #mgr#,
					   HIRE_DATE 	= #hireDate#,
					   SAL 			= #sal#,
					   COMM 		= #comm#,
					   DEPT_NO 		= #deptNo#
				 where EMP_NO = #empNo#
			]]>
		</update>
	
		<delete id="deleteEmp" parameterClass="empVO">
			<![CDATA[
				delete from EMP
				 where EMP_NO = #empNo#
			]]>
		</delete>
		
		<select id="selectEmp" parameterClass="empVO" resultMap="empResult">
			<![CDATA[
				select EMP_NO,
					   EMP_NAME,
					   JOB,
					   MGR,
					   HIRE_DATE,
					   SAL,
					   COMM,
					   DEPT_NO
				  from EMP
				 where EMP_NO = #empNo#
			]]>
		</select>
	
		<select id="selectEmpList" parameterClass="empVO" resultMap="empResult">
			<![CDATA[
				select EMP_NO,
					   EMP_NAME,
					   JOB,
					   MGR,
					   HIRE_DATE,
					   SAL,
					   COMM,
					   DEPT_NO
				  from EMP
				 where 1 = 1
			]]>
			<isNotNull prepend="and" property="empNo">
				EMP_NO = #empNo#
			</isNotNull>
			<isNotNull prepend="and" property="empName">
				EMP_NAME LIKE '%' || #empName# || '%'
			</isNotNull>
		</select>
		
	</sqlMap>
	/**************************************************************************************/

 6) Testcase 작성
	. /lab204-dataaccess/src/test/java/egovframework/lab/dataaccess/service/EmpServiceTest.java 를 작성한다.
	/**************************************************************************************/
        package egovframework.lab.dataaccess.service;
        
        import static org.junit.Assert.assertEquals;
        import static org.junit.Assert.assertNotNull;
        import static org.junit.Assert.assertTrue;
        import static org.junit.Assert.fail;
        
        import java.math.BigDecimal;
        import java.text.ParseException;
        import java.text.SimpleDateFormat;
        import java.util.List;
        
        import javax.annotation.Resource;
        import javax.sql.DataSource;
        
        import org.junit.Before;
        import org.junit.Test;
        import org.junit.runner.RunWith;
        import org.springframework.core.io.ClassPathResource;
        import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
        import org.springframework.test.context.ContextConfiguration;
        import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
        import org.springframework.test.context.transaction.TransactionConfiguration;
        import org.springframework.test.jdbc.SimpleJdbcTestUtils;
        import org.springframework.transaction.annotation.Transactional;
        
        import egovframework.rte.fdl.cmmn.exception.EgovBizException;
        
        @RunWith(SpringJUnit4ClassRunner.class)
        @ContextConfiguration(locations = {"classpath*:META-INF/spring/context-*" })
        @TransactionConfiguration(transactionManager = "txManager", defaultRollback = false)
        @Transactional
        public class EmpServiceTest {
            
            @Resource(name = "dataSource")
            DataSource dataSource;
        
            @Resource(name = "empService")
            EmpService empService;
            
            @Before
            public void onSetUp() throws Exception {
                // 테스트 편의상 매 테스트메서드 수행전 외부의 sql file 로부터 DB 초기화
                // (기존 테이블 삭제/생성)
                SimpleJdbcTestUtils.executeSqlScript(
                    new SimpleJdbcTemplate(dataSource), new ClassPathResource(
                        "META-INF/testdata/sample_schema_hsql.sql"), true);
            }
        
            public EmpVO makeVO() throws ParseException {
                EmpVO vo = new EmpVO();
        
                // empNo 는 Biz. 서비스 내에서 id generation service 에
                // 의해 key 를 따고 설정할 것임.
        
                vo.setEmpName("홍길동");
                vo.setJob("개발자");
                vo.setMgr(new BigDecimal(7902));
                SimpleDateFormat sdf =
                    new SimpleDateFormat("yyyy-MM-dd", java.util.Locale.getDefault());
                vo.setHireDate(sdf.parse("2009-07-09"));
                vo.setSal(new BigDecimal(1000));
                vo.setComm(new BigDecimal(0));
                vo.setDeptNo(new BigDecimal(20));
        
                return vo;
            }
        
            public void checkResult(EmpVO vo, EmpVO resultVO) {
                assertNotNull(resultVO);
                assertEquals(vo.getEmpNo(), resultVO.getEmpNo());
                assertEquals(vo.getEmpName(), resultVO.getEmpName());
                assertEquals(vo.getJob(), resultVO.getJob());
                assertEquals(vo.getMgr(), resultVO.getMgr());
                assertEquals(vo.getHireDate(), resultVO.getHireDate());
                assertEquals(vo.getSal(), resultVO.getSal());
                assertEquals(vo.getComm(), resultVO.getComm());
                assertEquals(vo.getDeptNo(), resultVO.getDeptNo());
            }
        
            @Test
            public void testInsertEmp() throws Exception {
                EmpVO vo = makeVO();
        
                // insert
                BigDecimal empNo = empService.insertEmp(vo);
                vo.setEmpNo(empNo);
        
                // select
                EmpVO resultVO = empService.selectEmp(vo);
        
                // check
                checkResult(vo, resultVO);
            }
        
            @Test
            public void testUpdateEmp() throws Exception {
                EmpVO vo = makeVO();
        
                // insert
                BigDecimal empNo = empService.insertEmp(vo);
                vo.setEmpNo(empNo);
        
                // data change
                vo.setEmpName("홍길순");
                vo.setJob("설계자");
        
                // update
                empService.updateEmp(vo);
        
                // select
                EmpVO resultVO = empService.selectEmp(vo);
        
                // check
                checkResult(vo, resultVO);
            }
        
            @Test
            public void testDeleteEmp() throws Exception {
                EmpVO vo = makeVO();
        
                // insert
                BigDecimal empNo = empService.insertEmp(vo);
                vo.setEmpNo(empNo);
        
                // delete
                empService.deleteEmp(vo);
        
                // select
                try {
                    @SuppressWarnings("unused")
                    EmpVO resultVO = empService.selectEmp(vo);
                    fail("EgovBizException 이 발생해야 합니다.");
                } catch (Exception e) {
                    assertNotNull(e);
                    // 여기서는 비지니스 단에서 명시적으로 exception 처리 하였음.
                    // AbstractServiceImpl 을 extends 하고
                    // processException("info.nodata.msg"); 과
                    // 같이 메서드 콜 형태로 처리
                    assertTrue(e instanceof EgovBizException);
                    assertEquals("info.nodata.msg", ((EgovBizException) e)
                        .getMessageKey());
                    assertEquals("해당 데이터가 없습니다.", e.getMessage());
                }
            }
        
            @Test
            public void testSelectEmpList() throws Exception {
                EmpVO vo = makeVO();
        
                // insert
                BigDecimal empNo = empService.insertEmp(vo);
                vo.setEmpNo(empNo);
        
                // 검색조건으로 key 설정
                EmpVO searchVO = new EmpVO();
                searchVO.setEmpNo(vo.getEmpNo());
        
                // selectList
                List<EmpVO> resultList = empService.selectEmpList(searchVO);
        
                // key 조건에 대한 결과는 한건일 것임
                assertNotNull(resultList);
                assertTrue(resultList.size() > 0);
                assertEquals(1, resultList.size());
                checkResult(vo, resultList.get(0));
        
                // 검색조건으로 name 설정 - '%' || #empName# || '%'
                EmpVO searchVO2 = new EmpVO();
                searchVO2.setEmpName(""); // '%' || '' || '%'
                                          // --> '%%'
        
                // selectList
                List<EmpVO> resultList2 = empService.selectEmpList(searchVO2);
        
                // like 조건에 대한 결과는 한건 이상일 것임
                assertNotNull(resultList2);
                assertTrue(resultList2.size() > 0);
            }
                                
        }
	/**************************************************************************************/

3. Sql 로깅 설정
 1) /lab204-dataaccess/src/test/resources/META-INF/spring/jdbc.properties 를 다음과 같이 변경한다.
	/**************************************************************************************/
	driver=net.sf.log4jdbc.DriverSpy
	dburl=jdbc:log4jdbc:hsqldb:mem:testdb
	#dburl=jdbc:log4jdbc:hsqldb:hsql://localhost/sampledb
	username=sa
	password=
	/**************************************************************************************/

 2) /lab204-dataaccess/src/test/resources/log4j.xml 에 다음 Logger 를 추가한다.
	/**************************************************************************************/
	<!-- log SQL with timing information, post execution -->
	<logger name="jdbc.sqltiming" additivity="false">
		<level value="INFO" />
		<appender-ref ref="console" />
	</logger>
	/**************************************************************************************/